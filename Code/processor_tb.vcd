$date
	Sun May 14 23:46:44 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module p $end
$var wire 2 # ALUOp [1:0] $end
$var wire 1 $ ALUSrc $end
$var wire 1 % Branch $end
$var wire 32 & Instruction_Code [31:0] $end
$var wire 1 ' JAL $end
$var wire 1 ( JALR $end
$var wire 1 ) MemRead $end
$var wire 1 * MemWrite $end
$var wire 1 + MemtoReg $end
$var wire 1 , RegWrite $end
$var wire 32 - adder_output [31:0] $end
$var wire 2 . alu_control [1:0] $end
$var wire 32 / alu_result [31:0] $end
$var wire 1 0 and_output $end
$var wire 1 1 byte $end
$var wire 1 2 clk $end
$var wire 32 3 four_adder_output [31:0] $end
$var wire 32 4 immediate [31:0] $end
$var wire 10 5 instruction_address [9:0] $end
$var wire 1 6 jumpbranch $end
$var wire 32 7 mux_instr_1 [31:0] $end
$var wire 32 8 mux_instr_2 [31:0] $end
$var wire 7 9 opcode [6:0] $end
$var wire 1 : or_output $end
$var wire 32 ; output_line_wire [31:0] $end
$var wire 32 < pc_input [31:0] $end
$var wire 32 = read_data1_reg [31:0] $end
$var wire 32 > read_data2_reg [31:0] $end
$var wire 32 ? read_data_mem [31:0] $end
$var wire 32 @ reg_write_input2 [31:0] $end
$var wire 1 A reset $end
$var wire 32 B temp [31:0] $end
$var wire 32 C write_data_reg [31:0] $end
$scope module pc $end
$var wire 1 2 clk $end
$var wire 32 D next_address [31:0] $end
$var wire 1 A reset $end
$var reg 10 E instruction_address [9:0] $end
$upscope $end
$scope module imem $end
$var wire 32 F Instruction_Code [31:0] $end
$var wire 10 G PC [9:0] $end
$var wire 1 A reset $end
$upscope $end
$scope module regfile $end
$var wire 1 2 clock $end
$var wire 32 H read_data1 [31:0] $end
$var wire 32 I read_data2 [31:0] $end
$var wire 5 J read_reg_1 [4:0] $end
$var wire 5 K read_reg_2 [4:0] $end
$var wire 1 , regwrite $end
$var wire 1 A reset $end
$var wire 32 L write_data [31:0] $end
$var wire 5 M write_reg [4:0] $end
$upscope $end
$scope module CU $end
$var wire 7 N opcode [6:0] $end
$var reg 2 O ALUOp [1:0] $end
$var reg 1 P ALUSrc $end
$var reg 1 Q Branch $end
$var reg 1 R JAL $end
$var reg 1 S JALR $end
$var reg 1 T MemRead $end
$var reg 1 U MemWrite $end
$var reg 1 V MemtoReg $end
$var reg 1 W RegWrite $end
$upscope $end
$scope module imm_gen $end
$var wire 32 X instruction_code [31:0] $end
$var reg 32 Y immediate [31:0] $end
$upscope $end
$scope module alu_con $end
$var wire 2 Z ALUOp [1:0] $end
$var wire 4 [ func [3:0] $end
$var reg 2 \ alu_control [1:0] $end
$upscope $end
$scope module muxALU $end
$var wire 1 $ control_line $end
$var wire 32 ] input_1 [31:0] $end
$var wire 32 ^ input_2 [31:0] $end
$var reg 32 _ output_line [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 2 ` alu_control [1:0] $end
$var wire 32 a input_1 [31:0] $end
$var wire 32 b input_2 [31:0] $end
$var reg 32 c alu_result [31:0] $end
$upscope $end
$scope module mem_con $end
$var wire 1 ) MemRead $end
$var wire 1 * MemWrite $end
$var wire 3 d func3 [2:0] $end
$var reg 1 e byte $end
$upscope $end
$scope module data_mem $end
$var wire 1 f Instruction_Code $end
$var wire 1 ) MemRead $end
$var wire 1 * MemWrite $end
$var wire 1 g PC $end
$var wire 32 h address [31:0] $end
$var wire 1 1 byte $end
$var wire 1 2 clk $end
$var wire 32 i write_data [31:0] $end
$var reg 32 j read_data [31:0] $end
$upscope $end
$scope module reg_write $end
$var wire 1 + control_line $end
$var wire 32 k input_1 [31:0] $end
$var wire 32 l input_2 [31:0] $end
$var reg 32 m output_line [31:0] $end
$upscope $end
$scope module branch_con $end
$var wire 32 n alu_result [31:0] $end
$var wire 3 o func3 [2:0] $end
$var reg 1 p jumpbranch $end
$upscope $end
$scope module add $end
$var wire 32 q input_1 [31:0] $end
$var wire 32 r input_2 [31:0] $end
$var reg 32 s adder_output [31:0] $end
$upscope $end
$scope module four_add $end
$var wire 32 t input_1 [31:0] $end
$var reg 32 u adder_output [31:0] $end
$upscope $end
$scope module instr_1 $end
$var wire 1 0 control_line $end
$var wire 32 v input_1 [31:0] $end
$var wire 32 w input_2 [31:0] $end
$var reg 32 x output_line [31:0] $end
$upscope $end
$scope module instr_2 $end
$var wire 1 ( control_line $end
$var wire 32 y input_1 [31:0] $end
$var wire 32 z input_2 [31:0] $end
$var reg 32 { output_line [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx {
bx z
bx y
bx x
bx w
bx v
bx u
b0xxxxxxxxxx t
bx s
bx r
b0xxxxxxxxxx q
0p
bx o
bx n
bx m
bz l
bx k
bx j
bx i
bx h
zg
xf
0e
bx d
bx c
bx b
bx a
b0 `
bx _
bx ^
bx ]
b0 \
bx [
b0 Z
bx Y
bx X
0W
0V
0U
0T
0S
0R
0Q
0P
b0 O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
1A
bx @
bz ?
bx >
bx =
bx <
bx ;
0:
bx 9
bx 8
bx 7
06
bx 5
bx 4
bx 3
02
01
00
bx /
b0 .
bx -
0,
0+
0*
0)
0(
0'
bx &
0%
0$
b0 #
1"
0!
$end
#5000
b100 m
b100 C
b100 L
b100 {
b100 8
b100 <
b100 D
b100 c
b100 /
b100 k
b100 n
b100 z
b100 B
b100 h
1P
1$
1W
1,
b100 s
b100 -
b100 w
b100 _
b100 ;
b100 b
b100 x
b100 7
b100 y
b100 K
b100 >
b100 I
b100 ]
b100 i
b0 o
b0 d
b0 [
b0 J
b0 =
b0 H
b0 a
b101 M
b10011 9
b10011 N
b100 Y
b100 4
b100 ^
b100 r
b100 u
b100 3
b100 v
b0 E
b10000000000001010010011 &
b10000000000001010010011 F
b10000000000001010010011 X
b0 t
b0 q
b0 5
b0 G
1!
12
#10000
0!
02
0"
0A
#15000
b1001 m
b1001 C
b1001 L
b1001 c
b1001 /
b1001 k
b1001 n
b1001 z
b1001 B
b1001 h
b1000 {
b1000 8
b1000 <
b1000 D
b1001 _
b1001 ;
b1001 b
b1000 x
b1000 7
b1000 y
b1001 K
b1001 >
b1001 I
b1001 ]
b1001 i
b110 M
b1001 Y
b1001 4
b1001 ^
b1001 r
b1000 u
b1000 3
b1000 v
b1101 s
b1101 -
b1101 w
b100 E
b100100000000001100010011 &
b100100000000001100010011 F
b100100000000001100010011 X
b100 t
b100 q
b100 5
b100 G
1!
12
#20000
0!
02
#25000
b1100 m
b1100 C
b1100 L
10
bx \
bx .
bx `
1:
b1100 c
b1100 /
b1100 k
b1100 n
b1100 z
b1100 B
b1100 h
b10100 {
b10100 8
b10100 <
b10100 D
1Q
1%
bx O
bx #
bx Z
xP
x$
1R
1'
b1100 _
b1100 ;
b1100 b
b10100 x
b10100 7
b10100 y
b1100 K
b10010 >
b10010 I
b10010 ]
b10010 i
b1 M
b1101111 9
b1101111 N
b1100 Y
b1100 4
b1100 ^
b1100 r
b1100 u
b1100 3
b1100 v
b10100 s
b10100 -
b10100 w
b1000 E
b110000000000000011101111 &
b110000000000000011101111 F
b110000000000000011101111 X
b1000 t
b1000 q
b1000 5
b1000 G
1!
12
#30000
0!
02
#35000
b1101 m
b1101 C
b1101 L
b1101 c
b1101 /
b1101 k
b1101 n
b1101 z
b1101 B
b1101 h
00
b0 \
b0 .
b0 `
0:
b11000 {
b11000 8
b11000 <
b11000 D
0Q
0%
b10 O
b10 #
b10 Z
0P
0$
0R
0'
b1001 _
b1001 ;
b1001 b
b11000 x
b11000 7
b11000 y
b110 K
b1001 >
b1001 I
b1001 ]
b1001 i
b111 M
b101 J
b100 =
b100 H
b100 a
b110011 9
b110011 N
b0 Y
b0 4
b0 ^
b0 r
b11000 u
b11000 3
b11000 v
b10100 s
b10100 -
b10100 w
b10100 E
b11000101000001110110011 &
b11000101000001110110011 F
b11000101000001110110011 X
b10100 t
b10100 q
b10100 5
b10100 G
1!
12
#40000
0!
02
#45000
bx m
bx C
bx L
b11100 {
b11100 8
b11100 <
b11100 D
bx _
bx ;
bx b
bx c
bx /
bx k
bx n
bx z
bx B
bx h
b0 O
b0 #
b0 Z
0W
0,
b11100 x
b11100 7
b11100 y
bx K
bx >
bx I
bx ]
bx i
bx o
bx d
bx [
bx J
bx =
bx H
bx a
bx M
bx 9
bx N
b11100 u
b11100 3
b11100 v
b11000 s
b11000 -
b11000 w
b11000 E
bx &
bx F
bx X
b11000 t
b11000 q
b11000 5
b11000 G
1!
12
#50000
0!
02
#55000
b100000 {
b100000 8
b100000 <
b100000 D
b100000 x
b100000 7
b100000 y
b100000 u
b100000 3
b100000 v
b11100 s
b11100 -
b11100 w
b11100 E
b11100 t
b11100 q
b11100 5
b11100 G
1!
12
#60000
0!
02
#65000
b100100 {
b100100 8
b100100 <
b100100 D
b100100 x
b100100 7
b100100 y
b100100 u
b100100 3
b100100 v
b100000 s
b100000 -
b100000 w
b100000 E
b100000 t
b100000 q
b100000 5
b100000 G
1!
12
#70000
0!
02
#75000
b101000 {
b101000 8
b101000 <
b101000 D
b101000 x
b101000 7
b101000 y
b101000 u
b101000 3
b101000 v
b100100 s
b100100 -
b100100 w
b100100 E
b100100 t
b100100 q
b100100 5
b100100 G
1!
12
#80000
0!
02
#85000
b101100 {
b101100 8
b101100 <
b101100 D
b101100 x
b101100 7
b101100 y
b101100 u
b101100 3
b101100 v
b101000 s
b101000 -
b101000 w
b101000 E
b101000 t
b101000 q
b101000 5
b101000 G
1!
12
#90000
0!
02
#95000
b110000 {
b110000 8
b110000 <
b110000 D
b110000 x
b110000 7
b110000 y
b110000 u
b110000 3
b110000 v
b101100 s
b101100 -
b101100 w
b101100 E
b101100 t
b101100 q
b101100 5
b101100 G
1!
12
#100000
0!
02
#105000
b110100 {
b110100 8
b110100 <
b110100 D
b110100 x
b110100 7
b110100 y
b110100 u
b110100 3
b110100 v
b110000 s
b110000 -
b110000 w
b110000 E
b110000 t
b110000 q
b110000 5
b110000 G
1!
12
#110000
0!
02
#115000
b111000 {
b111000 8
b111000 <
b111000 D
b111000 x
b111000 7
b111000 y
b111000 u
b111000 3
b111000 v
b110100 s
b110100 -
b110100 w
b110100 E
b110100 t
b110100 q
b110100 5
b110100 G
1!
12
#120000
0!
02
#125000
b111100 {
b111100 8
b111100 <
b111100 D
b111100 x
b111100 7
b111100 y
b111100 u
b111100 3
b111100 v
b111000 s
b111000 -
b111000 w
b111000 E
b111000 t
b111000 q
b111000 5
b111000 G
1!
12
#130000
0!
02
#135000
b1000000 {
b1000000 8
b1000000 <
b1000000 D
b1000000 x
b1000000 7
b1000000 y
b1000000 u
b1000000 3
b1000000 v
b111100 s
b111100 -
b111100 w
b111100 E
b111100 t
b111100 q
b111100 5
b111100 G
1!
12
#140000
0!
02
#145000
b1000100 {
b1000100 8
b1000100 <
b1000100 D
b1000100 x
b1000100 7
b1000100 y
b1000100 u
b1000100 3
b1000100 v
b1000000 s
b1000000 -
b1000000 w
b1000000 E
b1000000 t
b1000000 q
b1000000 5
b1000000 G
1!
12
#150000
0!
02
#155000
b1001000 {
b1001000 8
b1001000 <
b1001000 D
b1001000 x
b1001000 7
b1001000 y
b1001000 u
b1001000 3
b1001000 v
b1000100 s
b1000100 -
b1000100 w
b1000100 E
b1000100 t
b1000100 q
b1000100 5
b1000100 G
1!
12
#160000
0!
02
#165000
b1001100 {
b1001100 8
b1001100 <
b1001100 D
b1001100 x
b1001100 7
b1001100 y
b1001100 u
b1001100 3
b1001100 v
b1001000 s
b1001000 -
b1001000 w
b1001000 E
b1001000 t
b1001000 q
b1001000 5
b1001000 G
1!
12
#170000
0!
02
#175000
b1010000 {
b1010000 8
b1010000 <
b1010000 D
b1010000 x
b1010000 7
b1010000 y
b1010000 u
b1010000 3
b1010000 v
b1001100 s
b1001100 -
b1001100 w
b1001100 E
b1001100 t
b1001100 q
b1001100 5
b1001100 G
1!
12
#180000
0!
02
#185000
b1010100 {
b1010100 8
b1010100 <
b1010100 D
b1010100 x
b1010100 7
b1010100 y
b1010100 u
b1010100 3
b1010100 v
b1010000 s
b1010000 -
b1010000 w
b1010000 E
b1010000 t
b1010000 q
b1010000 5
b1010000 G
1!
12
#190000
0!
02
#195000
b1011000 {
b1011000 8
b1011000 <
b1011000 D
b1011000 x
b1011000 7
b1011000 y
b1011000 u
b1011000 3
b1011000 v
b1010100 s
b1010100 -
b1010100 w
b1010100 E
b1010100 t
b1010100 q
b1010100 5
b1010100 G
1!
12
#200000
0!
02
#205000
b1011100 {
b1011100 8
b1011100 <
b1011100 D
b1011100 x
b1011100 7
b1011100 y
b1011100 u
b1011100 3
b1011100 v
b1011000 s
b1011000 -
b1011000 w
b1011000 E
b1011000 t
b1011000 q
b1011000 5
b1011000 G
1!
12
#210000
0!
02
