$date
	Sun May 14 23:41:14 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor $end
$var wire 2 ! ALUOp [1:0] $end
$var wire 1 " ALUSrc $end
$var wire 1 # Branch $end
$var wire 32 $ Instruction_Code [31:0] $end
$var wire 1 % JAL $end
$var wire 1 & JALR $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 1 ) MemtoReg $end
$var wire 1 * RegWrite $end
$var wire 32 + adder_output [31:0] $end
$var wire 2 , alu_control [1:0] $end
$var wire 32 - alu_result [31:0] $end
$var wire 1 . and_output $end
$var wire 1 / byte $end
$var wire 32 0 four_adder_output [31:0] $end
$var wire 32 1 immediate [31:0] $end
$var wire 10 2 instruction_address [9:0] $end
$var wire 1 3 instruction_code $end
$var wire 1 4 jumpbranch $end
$var wire 32 5 mux_instr_1 [31:0] $end
$var wire 32 6 mux_instr_2 [31:0] $end
$var wire 7 7 opcode [6:0] $end
$var wire 1 8 or_output $end
$var wire 32 9 output_line_wire [31:0] $end
$var wire 32 : pc_input [31:0] $end
$var wire 32 ; read_data1_reg [31:0] $end
$var wire 32 < read_data2_reg [31:0] $end
$var wire 32 = read_data_mem [31:0] $end
$var wire 32 > reg_write_input2 [31:0] $end
$var wire 32 ? temp [31:0] $end
$var wire 32 @ write_data_reg [31:0] $end
$var reg 1 A clk $end
$var reg 1 B reset $end
$scope module pc $end
$var wire 1 C clk $end
$var wire 32 D next_address [31:0] $end
$var wire 1 E reset $end
$var reg 10 F instruction_address [9:0] $end
$upscope $end
$scope module imem $end
$var wire 32 G Instruction_Code [31:0] $end
$var wire 10 H PC [9:0] $end
$var wire 1 E reset $end
$upscope $end
$scope module regfile $end
$var wire 1 C clock $end
$var wire 32 I read_data1 [31:0] $end
$var wire 32 J read_data2 [31:0] $end
$var wire 5 K read_reg_1 [4:0] $end
$var wire 5 L read_reg_2 [4:0] $end
$var wire 1 * regwrite $end
$var wire 1 E reset $end
$var wire 32 M write_data [31:0] $end
$var wire 5 N write_reg [4:0] $end
$upscope $end
$scope module CU $end
$var wire 7 O opcode [6:0] $end
$var reg 2 P ALUOp [1:0] $end
$var reg 1 Q ALUSrc $end
$var reg 1 R Branch $end
$var reg 1 S JAL $end
$var reg 1 T JALR $end
$var reg 1 U MemRead $end
$var reg 1 V MemWrite $end
$var reg 1 W MemtoReg $end
$var reg 1 X RegWrite $end
$upscope $end
$scope module imm_gen $end
$var wire 32 Y instruction_code [31:0] $end
$var reg 32 Z immediate [31:0] $end
$upscope $end
$scope module alu_con $end
$var wire 2 [ ALUOp [1:0] $end
$var wire 4 \ func [3:0] $end
$var reg 2 ] alu_control [1:0] $end
$upscope $end
$scope module muxALU $end
$var wire 1 " control_line $end
$var wire 32 ^ input_1 [31:0] $end
$var wire 32 _ input_2 [31:0] $end
$var reg 32 ` output_line [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 2 a alu_control [1:0] $end
$var wire 32 b input_1 [31:0] $end
$var wire 32 c input_2 [31:0] $end
$var reg 32 d alu_result [31:0] $end
$upscope $end
$scope module mem_con $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 3 e func3 [2:0] $end
$var reg 1 f byte $end
$upscope $end
$scope module data_mem $end
$var wire 1 g Instruction_Code $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 1 h PC $end
$var wire 32 i address [31:0] $end
$var wire 1 / byte $end
$var wire 1 C clk $end
$var wire 32 j write_data [31:0] $end
$var reg 32 k read_data [31:0] $end
$upscope $end
$scope module reg_write $end
$var wire 1 ) control_line $end
$var wire 32 l input_1 [31:0] $end
$var wire 32 m input_2 [31:0] $end
$var reg 32 n output_line [31:0] $end
$upscope $end
$scope module branch_con $end
$var wire 32 o alu_result [31:0] $end
$var wire 3 p func3 [2:0] $end
$var reg 1 q jumpbranch $end
$upscope $end
$scope module add $end
$var wire 32 r input_1 [31:0] $end
$var wire 32 s input_2 [31:0] $end
$var reg 32 t adder_output [31:0] $end
$upscope $end
$scope module four_add $end
$var wire 32 u input_1 [31:0] $end
$var reg 32 v adder_output [31:0] $end
$upscope $end
$scope module instr_1 $end
$var wire 1 . control_line $end
$var wire 32 w input_1 [31:0] $end
$var wire 32 x input_2 [31:0] $end
$var reg 32 y output_line [31:0] $end
$upscope $end
$scope module instr_2 $end
$var wire 1 & control_line $end
$var wire 32 z input_1 [31:0] $end
$var wire 32 { input_2 [31:0] $end
$var reg 32 | output_line [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx |
bx {
bx z
bx y
bx x
bx w
bx v
b0xxxxxxxxxx u
bx t
bx s
b0xxxxxxxxxx r
0q
bx p
bx o
bx n
bz m
bx l
bx k
bx j
bx i
zh
xg
0f
bx e
bx d
bx c
bx b
b0 a
bx `
bx _
bx ^
b0 ]
bx \
b0 [
bx Z
bx Y
0X
0W
0V
0U
0T
0S
0R
0Q
b0 P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
1E
bx D
0C
1B
0A
bx @
bx ?
bx >
bz =
bx <
bx ;
bx :
bx 9
08
bx 7
bx 6
bx 5
04
z3
bx 2
bx 1
bx 0
0/
0.
bx -
b0 ,
bx +
0*
0)
0(
0'
0&
0%
bx $
0#
0"
b0 !
$end
#5000
b100 n
b100 @
b100 M
b100 |
b100 6
b100 :
b100 D
b100 d
b100 -
b100 l
b100 o
b100 {
b100 ?
b100 i
1Q
1"
1X
1*
b100 t
b100 +
b100 x
b100 `
b100 9
b100 c
b100 y
b100 5
b100 z
b100 L
b100 <
b100 J
b100 ^
b100 j
b0 \
b0 K
b0 ;
b0 I
b0 b
b101 N
b10011 7
b10011 O
b100 Z
b100 1
b100 _
b100 s
b100 v
b100 0
b100 w
b0 F
b10000000000001010010011 $
b10000000000001010010011 G
b10000000000001010010011 Y
b0 u
b0 r
b0 2
b0 H
1A
1C
#10000
0A
0C
0B
0E
#15000
b1001 n
b1001 @
b1001 M
b1001 d
b1001 -
b1001 l
b1001 o
b1001 {
b1001 ?
b1001 i
b1000 |
b1000 6
b1000 :
b1000 D
b1001 `
b1001 9
b1001 c
b1000 y
b1000 5
b1000 z
b1001 L
b1001 <
b1001 J
b1001 ^
b1001 j
b110 N
b1001 Z
b1001 1
b1001 _
b1001 s
b1000 v
b1000 0
b1000 w
b1101 t
b1101 +
b1101 x
b100 F
b100100000000001100010011 $
b100100000000001100010011 G
b100100000000001100010011 Y
b100 u
b100 r
b100 2
b100 H
1A
1C
#20000
0A
0C
#25000
b1100 n
b1100 @
b1100 M
1.
bx ]
bx ,
bx a
18
b1100 d
b1100 -
b1100 l
b1100 o
b1100 {
b1100 ?
b1100 i
b10100 |
b10100 6
b10100 :
b10100 D
1R
1#
bx P
bx !
bx [
xQ
x"
1S
1%
b1100 `
b1100 9
b1100 c
b10100 y
b10100 5
b10100 z
b1100 L
b10010 <
b10010 J
b10010 ^
b10010 j
b1 N
b1101111 7
b1101111 O
b1100 Z
b1100 1
b1100 _
b1100 s
b1100 v
b1100 0
b1100 w
b10100 t
b10100 +
b10100 x
b1000 F
b110000000000000011101111 $
b110000000000000011101111 G
b110000000000000011101111 Y
b1000 u
b1000 r
b1000 2
b1000 H
1A
1C
#30000
0A
0C
#35000
b1101 n
b1101 @
b1101 M
b1101 d
b1101 -
b1101 l
b1101 o
b1101 {
b1101 ?
b1101 i
0.
b0 ]
b0 ,
b0 a
08
b11000 |
b11000 6
b11000 :
b11000 D
0R
0#
b10 P
b10 !
b10 [
0Q
0"
0S
0%
b1001 `
b1001 9
b1001 c
b11000 y
b11000 5
b11000 z
b110 L
b1001 <
b1001 J
b1001 ^
b1001 j
b111 N
b101 K
b100 ;
b100 I
b100 b
b110011 7
b110011 O
b0 Z
b0 1
b0 _
b0 s
b11000 v
b11000 0
b11000 w
b10100 t
b10100 +
b10100 x
b10100 F
b11000101000001110110011 $
b11000101000001110110011 G
b11000101000001110110011 Y
b10100 u
b10100 r
b10100 2
b10100 H
1A
1C
#40000
0A
0C
#45000
bx n
bx @
bx M
b11100 |
b11100 6
b11100 :
b11100 D
bx `
bx 9
bx c
bx d
bx -
bx l
bx o
bx {
bx ?
bx i
b0 P
b0 !
b0 [
0X
0*
b11100 y
b11100 5
b11100 z
bx L
bx <
bx J
bx ^
bx j
bx \
bx K
bx ;
bx I
bx b
bx N
bx 7
bx O
b11100 v
b11100 0
b11100 w
b11000 t
b11000 +
b11000 x
b11000 F
bx $
bx G
bx Y
b11000 u
b11000 r
b11000 2
b11000 H
1A
1C
#50000
0A
0C
#55000
b100000 |
b100000 6
b100000 :
b100000 D
b100000 y
b100000 5
b100000 z
b100000 v
b100000 0
b100000 w
b11100 t
b11100 +
b11100 x
b11100 F
b11100 u
b11100 r
b11100 2
b11100 H
1A
1C
#60000
0A
0C
#65000
b100100 |
b100100 6
b100100 :
b100100 D
b100100 y
b100100 5
b100100 z
b100100 v
b100100 0
b100100 w
b100000 t
b100000 +
b100000 x
b100000 F
b100000 u
b100000 r
b100000 2
b100000 H
1A
1C
#70000
0A
0C
#75000
b101000 |
b101000 6
b101000 :
b101000 D
b101000 y
b101000 5
b101000 z
b101000 v
b101000 0
b101000 w
b100100 t
b100100 +
b100100 x
b100100 F
b100100 u
b100100 r
b100100 2
b100100 H
1A
1C
#80000
0A
0C
#85000
b101100 |
b101100 6
b101100 :
b101100 D
b101100 y
b101100 5
b101100 z
b101100 v
b101100 0
b101100 w
b101000 t
b101000 +
b101000 x
b101000 F
b101000 u
b101000 r
b101000 2
b101000 H
1A
1C
#90000
0A
0C
#95000
b110000 |
b110000 6
b110000 :
b110000 D
b110000 y
b110000 5
b110000 z
b110000 v
b110000 0
b110000 w
b101100 t
b101100 +
b101100 x
b101100 F
b101100 u
b101100 r
b101100 2
b101100 H
1A
1C
#100000
0A
0C
#105000
b110100 |
b110100 6
b110100 :
b110100 D
b110100 y
b110100 5
b110100 z
b110100 v
b110100 0
b110100 w
b110000 t
b110000 +
b110000 x
b110000 F
b110000 u
b110000 r
b110000 2
b110000 H
1A
1C
#110000
0A
0C
#115000
b111000 |
b111000 6
b111000 :
b111000 D
b111000 y
b111000 5
b111000 z
b111000 v
b111000 0
b111000 w
b110100 t
b110100 +
b110100 x
b110100 F
b110100 u
b110100 r
b110100 2
b110100 H
1A
1C
#120000
0A
0C
#125000
b111100 |
b111100 6
b111100 :
b111100 D
b111100 y
b111100 5
b111100 z
b111100 v
b111100 0
b111100 w
b111000 t
b111000 +
b111000 x
b111000 F
b111000 u
b111000 r
b111000 2
b111000 H
1A
1C
#130000
0A
0C
#135000
b1000000 |
b1000000 6
b1000000 :
b1000000 D
b1000000 y
b1000000 5
b1000000 z
b1000000 v
b1000000 0
b1000000 w
b111100 t
b111100 +
b111100 x
b111100 F
b111100 u
b111100 r
b111100 2
b111100 H
1A
1C
#140000
0A
0C
#145000
b1000100 |
b1000100 6
b1000100 :
b1000100 D
b1000100 y
b1000100 5
b1000100 z
b1000100 v
b1000100 0
b1000100 w
b1000000 t
b1000000 +
b1000000 x
b1000000 F
b1000000 u
b1000000 r
b1000000 2
b1000000 H
1A
1C
#150000
0A
0C
#155000
b1001000 |
b1001000 6
b1001000 :
b1001000 D
b1001000 y
b1001000 5
b1001000 z
b1001000 v
b1001000 0
b1001000 w
b1000100 t
b1000100 +
b1000100 x
b1000100 F
b1000100 u
b1000100 r
b1000100 2
b1000100 H
1A
1C
#160000
0A
0C
#165000
b1001100 |
b1001100 6
b1001100 :
b1001100 D
b1001100 y
b1001100 5
b1001100 z
b1001100 v
b1001100 0
b1001100 w
b1001000 t
b1001000 +
b1001000 x
b1001000 F
b1001000 u
b1001000 r
b1001000 2
b1001000 H
1A
1C
#170000
0A
0C
#175000
b1010000 |
b1010000 6
b1010000 :
b1010000 D
b1010000 y
b1010000 5
b1010000 z
b1010000 v
b1010000 0
b1010000 w
b1001100 t
b1001100 +
b1001100 x
b1001100 F
b1001100 u
b1001100 r
b1001100 2
b1001100 H
1A
1C
#180000
0A
0C
#185000
b1010100 |
b1010100 6
b1010100 :
b1010100 D
b1010100 y
b1010100 5
b1010100 z
b1010100 v
b1010100 0
b1010100 w
b1010000 t
b1010000 +
b1010000 x
b1010000 F
b1010000 u
b1010000 r
b1010000 2
b1010000 H
1A
1C
#190000
0A
0C
#195000
b1011000 |
b1011000 6
b1011000 :
b1011000 D
b1011000 y
b1011000 5
b1011000 z
b1011000 v
b1011000 0
b1011000 w
b1010100 t
b1010100 +
b1010100 x
b1010100 F
b1010100 u
b1010100 r
b1010100 2
b1010100 H
1A
1C
#200000
0A
0C
#205000
b1011100 |
b1011100 6
b1011100 :
b1011100 D
b1011100 y
b1011100 5
b1011100 z
b1011100 v
b1011100 0
b1011100 w
b1011000 t
b1011000 +
b1011000 x
b1011000 F
b1011000 u
b1011000 r
b1011000 2
b1011000 H
1A
1C
#210000
0A
0C
