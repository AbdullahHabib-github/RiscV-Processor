$date
	Sun May 14 22:10:57 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test $end
$var wire 2 ! ALUOp [1:0] $end
$var wire 1 " ALUSrc $end
$var wire 1 # Branch $end
$var wire 32 $ Instruction_Code [31:0] $end
$var wire 1 % JAL $end
$var wire 1 & JALR $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 1 ) MemtoReg $end
$var wire 1 * RegWrite $end
$var wire 32 + adder_output [31:0] $end
$var wire 2 , alu_control [1:0] $end
$var wire 32 - alu_result [31:0] $end
$var wire 1 . and_output $end
$var wire 1 / byte $end
$var wire 32 0 four_adder_output [31:0] $end
$var wire 32 1 immediate [31:0] $end
$var wire 10 2 instruction_address [9:0] $end
$var wire 1 3 instruction_code $end
$var wire 1 4 jumpbranch $end
$var wire 32 5 mux_instr_1 [31:0] $end
$var wire 32 6 mux_instr_2 [31:0] $end
$var wire 7 7 opcode [6:0] $end
$var wire 1 8 or_output $end
$var wire 32 9 output_line [31:0] $end
$var wire 32 : output_line1 [31:0] $end
$var wire 32 ; pc_input [31:0] $end
$var wire 32 < read_data1_reg [31:0] $end
$var wire 32 = read_data2_reg [31:0] $end
$var wire 32 > read_data_mem [31:0] $end
$var wire 32 ? write_data_reg [31:0] $end
$var reg 1 @ clk $end
$var reg 1 A reset $end
$scope module pc $end
$var wire 1 B clk $end
$var wire 32 C next_address [31:0] $end
$var wire 1 D reset $end
$var reg 10 E instruction_address [9:0] $end
$upscope $end
$scope module imem $end
$var wire 32 F Instruction_Code [31:0] $end
$var wire 10 G PC [9:0] $end
$var wire 1 D reset $end
$upscope $end
$scope module regfile $end
$var wire 1 B clock $end
$var wire 32 H read_data1 [31:0] $end
$var wire 32 I read_data2 [31:0] $end
$var wire 5 J read_reg_1 [4:0] $end
$var wire 5 K read_reg_2 [4:0] $end
$var wire 1 * regwrite $end
$var wire 1 D reset $end
$var wire 32 L write_data [31:0] $end
$var wire 5 M write_reg [4:0] $end
$upscope $end
$scope module CU $end
$var wire 7 N opcode [6:0] $end
$var reg 2 O ALUOp [1:0] $end
$var reg 1 P ALUSrc $end
$var reg 1 Q Branch $end
$var reg 1 R JAL $end
$var reg 1 S JALR $end
$var reg 1 T MemRead $end
$var reg 1 U MemWrite $end
$var reg 1 V MemtoReg $end
$var reg 1 W RegWrite $end
$upscope $end
$scope module imm_gen $end
$var wire 32 X instruction_code [31:0] $end
$var reg 32 Y immediate [31:0] $end
$upscope $end
$scope module alu_con $end
$var wire 2 Z ALUOp [1:0] $end
$var wire 4 [ func [3:0] $end
$var reg 2 \ alu_control [1:0] $end
$upscope $end
$scope module muxALU $end
$var wire 1 " control_line $end
$var wire 32 ] input_1 [31:0] $end
$var wire 32 ^ input_2 [31:0] $end
$var reg 32 _ output_line [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 2 ` alu_control [1:0] $end
$var wire 32 a input_1 [31:0] $end
$var wire 32 b input_2 [31:0] $end
$var reg 32 c alu_result [31:0] $end
$upscope $end
$scope module mem_con $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 3 d func3 [2:0] $end
$var reg 1 e byte $end
$upscope $end
$scope module data_mem $end
$var wire 1 f Instruction_Code $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 1 g PC $end
$var wire 32 h address [31:0] $end
$var wire 1 / byte $end
$var wire 1 B clk $end
$var wire 32 i write_data [31:0] $end
$var reg 32 j read_data [31:0] $end
$upscope $end
$scope module reg_write $end
$var wire 1 " control_line $end
$var wire 32 k input_1 [31:0] $end
$var wire 32 l input_2 [31:0] $end
$var reg 32 m output_line [31:0] $end
$upscope $end
$scope module branch_con $end
$var wire 32 n alu_result [31:0] $end
$var wire 3 o func3 [2:0] $end
$var reg 1 p jumpbranch $end
$upscope $end
$scope module add $end
$var wire 32 q input_1 [31:0] $end
$var wire 32 r input_2 [31:0] $end
$var reg 32 s adder_output [31:0] $end
$upscope $end
$scope module four_add $end
$var wire 32 t input_1 [31:0] $end
$var reg 32 u adder_output [31:0] $end
$upscope $end
$scope module instr_1 $end
$var wire 1 . control_line $end
$var wire 32 v input_1 [31:0] $end
$var wire 32 w input_2 [31:0] $end
$var reg 32 x output_line [31:0] $end
$upscope $end
$scope module instr_2 $end
$var wire 1 & control_line $end
$var wire 32 y input_1 [31:0] $end
$var wire 32 z input_2 [31:0] $end
$var reg 32 { output_line [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx {
bx z
bx y
bx x
bx w
bx v
bx u
b0xxxxxxxxxx t
bx s
bx r
b0xxxxxxxxxx q
0p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
zg
xf
0e
bx d
bx c
bx b
bx a
b0 `
bx _
bx ^
bx ]
b0 \
bx [
b0 Z
bx Y
bx X
0W
0V
0U
0T
0S
0R
0Q
0P
b0 O
bx N
bx M
bz L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
1D
bx C
0B
1A
0@
bz ?
bx >
bx =
bx <
bx ;
bx :
bx 9
08
bx 7
bx 6
bx 5
04
z3
bx 2
bx 1
bx 0
0/
0.
bx -
b0 ,
bx +
0*
0)
0(
0'
0&
0%
bx $
0#
0"
b0 !
$end
#5000
b100 {
b100 6
b100 ;
b100 C
b10 O
b10 !
b10 Z
1W
1*
b0 s
b0 +
b0 w
b0 _
b100 x
b100 5
b100 y
b0 K
b0 =
b0 I
b0 ]
b0 i
b101 J
b101 <
b101 H
b101 a
b110 M
b110011 7
b110011 N
b0 Y
b0 1
b0 ^
b0 r
b100 u
b100 0
b100 v
b0 E
b101000001100110011 $
b101000001100110011 F
b101000001100110011 X
b0 t
b0 q
b0 2
b0 G
1@
1B
#10000
0@
0B
0A
0D
#15000
b1000 {
b1000 6
b1000 ;
b1000 C
b0 O
b0 !
b0 Z
1P
1"
b100 _
b1000 x
b1000 5
b1000 y
b100 K
b100 =
b100 I
b100 ]
b100 i
b0 J
b0 <
b0 H
b0 a
b101 M
b10011 7
b10011 N
b100 Y
b100 1
b100 ^
b100 r
b1000 u
b1000 0
b1000 v
b1000 s
b1000 +
b1000 w
b100 E
b10000000000001010010011 $
b10000000000001010010011 F
b10000000000001010010011 X
b100 t
b100 q
b100 2
b100 G
1@
1B
#20000
0@
0B
#25000
b1100 {
b1100 6
b1100 ;
b1100 C
0P
0"
0W
0*
bx _
b1100 x
b1100 5
b1100 y
bx K
bx =
bx I
bx ]
bx i
bx J
bx <
bx H
bx a
bx M
bx 7
bx N
b0 Y
b0 1
b0 ^
b0 r
b1100 u
b1100 0
b1100 v
b1000 s
b1000 +
b1000 w
b1000 E
bx $
bx F
bx X
b1000 t
b1000 q
b1000 2
b1000 G
1@
1B
#30000
0@
0B
#35000
b10000 {
b10000 6
b10000 ;
b10000 C
b10000 x
b10000 5
b10000 y
b10000 u
b10000 0
b10000 v
b1100 s
b1100 +
b1100 w
b1100 E
b1100 t
b1100 q
b1100 2
b1100 G
1@
1B
#40000
0@
0B
#45000
b10100 {
b10100 6
b10100 ;
b10100 C
b10100 x
b10100 5
b10100 y
b10100 u
b10100 0
b10100 v
b10000 s
b10000 +
b10000 w
b10000 E
b10000 t
b10000 q
b10000 2
b10000 G
1@
1B
#50000
0@
0B
#55000
b11000 {
b11000 6
b11000 ;
b11000 C
b11000 x
b11000 5
b11000 y
b11000 u
b11000 0
b11000 v
b10100 s
b10100 +
b10100 w
b10100 E
b10100 t
b10100 q
b10100 2
b10100 G
1@
1B
#60000
0@
0B
#65000
b11100 {
b11100 6
b11100 ;
b11100 C
b11100 x
b11100 5
b11100 y
b11100 u
b11100 0
b11100 v
b11000 s
b11000 +
b11000 w
b11000 E
b11000 t
b11000 q
b11000 2
b11000 G
1@
1B
#70000
0@
0B
#75000
b100000 {
b100000 6
b100000 ;
b100000 C
b100000 x
b100000 5
b100000 y
b100000 u
b100000 0
b100000 v
b11100 s
b11100 +
b11100 w
b11100 E
b11100 t
b11100 q
b11100 2
b11100 G
1@
1B
#80000
0@
0B
#85000
b100100 {
b100100 6
b100100 ;
b100100 C
b100100 x
b100100 5
b100100 y
b100100 u
b100100 0
b100100 v
b100000 s
b100000 +
b100000 w
b100000 E
b100000 t
b100000 q
b100000 2
b100000 G
1@
1B
#90000
0@
0B
#95000
b101000 {
b101000 6
b101000 ;
b101000 C
b101000 x
b101000 5
b101000 y
b101000 u
b101000 0
b101000 v
b100100 s
b100100 +
b100100 w
b100100 E
b100100 t
b100100 q
b100100 2
b100100 G
1@
1B
#100000
0@
0B
#105000
b101100 {
b101100 6
b101100 ;
b101100 C
b101100 x
b101100 5
b101100 y
b101100 u
b101100 0
b101100 v
b101000 s
b101000 +
b101000 w
b101000 E
b101000 t
b101000 q
b101000 2
b101000 G
1@
1B
#110000
0@
0B
#115000
b110000 {
b110000 6
b110000 ;
b110000 C
b110000 x
b110000 5
b110000 y
b110000 u
b110000 0
b110000 v
b101100 s
b101100 +
b101100 w
b101100 E
b101100 t
b101100 q
b101100 2
b101100 G
1@
1B
#120000
0@
0B
#125000
b110100 {
b110100 6
b110100 ;
b110100 C
b110100 x
b110100 5
b110100 y
b110100 u
b110100 0
b110100 v
b110000 s
b110000 +
b110000 w
b110000 E
b110000 t
b110000 q
b110000 2
b110000 G
1@
1B
#130000
0@
0B
#135000
b111000 {
b111000 6
b111000 ;
b111000 C
b111000 x
b111000 5
b111000 y
b111000 u
b111000 0
b111000 v
b110100 s
b110100 +
b110100 w
b110100 E
b110100 t
b110100 q
b110100 2
b110100 G
1@
1B
#140000
0@
0B
#145000
b111100 {
b111100 6
b111100 ;
b111100 C
b111100 x
b111100 5
b111100 y
b111100 u
b111100 0
b111100 v
b111000 s
b111000 +
b111000 w
b111000 E
b111000 t
b111000 q
b111000 2
b111000 G
1@
1B
#150000
0@
0B
#155000
b1000000 {
b1000000 6
b1000000 ;
b1000000 C
b1000000 x
b1000000 5
b1000000 y
b1000000 u
b1000000 0
b1000000 v
b111100 s
b111100 +
b111100 w
b111100 E
b111100 t
b111100 q
b111100 2
b111100 G
1@
1B
#160000
0@
0B
#165000
b1000100 {
b1000100 6
b1000100 ;
b1000100 C
b1000100 x
b1000100 5
b1000100 y
b1000100 u
b1000100 0
b1000100 v
b1000000 s
b1000000 +
b1000000 w
b1000000 E
b1000000 t
b1000000 q
b1000000 2
b1000000 G
1@
1B
#170000
0@
0B
#175000
b1001000 {
b1001000 6
b1001000 ;
b1001000 C
b1001000 x
b1001000 5
b1001000 y
b1001000 u
b1001000 0
b1001000 v
b1000100 s
b1000100 +
b1000100 w
b1000100 E
b1000100 t
b1000100 q
b1000100 2
b1000100 G
1@
1B
#180000
0@
0B
#185000
b1001100 {
b1001100 6
b1001100 ;
b1001100 C
b1001100 x
b1001100 5
b1001100 y
b1001100 u
b1001100 0
b1001100 v
b1001000 s
b1001000 +
b1001000 w
b1001000 E
b1001000 t
b1001000 q
b1001000 2
b1001000 G
1@
1B
#190000
0@
0B
#195000
b1010000 {
b1010000 6
b1010000 ;
b1010000 C
b1010000 x
b1010000 5
b1010000 y
b1010000 u
b1010000 0
b1010000 v
b1001100 s
b1001100 +
b1001100 w
b1001100 E
b1001100 t
b1001100 q
b1001100 2
b1001100 G
1@
1B
#200000
0@
0B
#205000
b1010100 {
b1010100 6
b1010100 ;
b1010100 C
b1010100 x
b1010100 5
b1010100 y
b1010100 u
b1010100 0
b1010100 v
b1010000 s
b1010000 +
b1010000 w
b1010000 E
b1010000 t
b1010000 q
b1010000 2
b1010000 G
1@
1B
#210000
0@
0B
